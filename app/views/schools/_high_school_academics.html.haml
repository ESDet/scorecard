.stat-region
  .header What percent of the students are <u>ready</u> for college?
  .content
    .container_12
      .visual
        - if @math_ready
          %div(id="math-ready")
        - if @reading_ready
          %div.hide(id="reading-ready")
        - if @science_ready
          %div.hide(id="science-ready")
        - if @english_ready
          %div.hide(id="english-ready")
      .subjects
        - if @math_ready
          .subject.active(data-target="math-ready")
            .title Math
        - if @reading_ready
          .subject(data-target="reading-ready")
            .title Reading
        - if @science_ready
          .subject(data-target="science-ready")
            .title Science
        - if @english_ready
          .subject(data-target="english-ready")
            .title English
    .links
      .compare(style="color: #14b2ae") State Average
      .compare(style="color: #ec5932") Detroit Average
      .compare(style="color: #bde35f") School Average
      .message
        .act-icon
        Results based on ACT scores
.stat-region
  .header How do the students test scores <u>grow</u> over time compared to state averages?
  .content
    .visual
      %div(id="math-growth")
        = render 'subject_growth', growth: @math_growth
      %div.hide(id="reading-growth")
        = render 'subject_growth', growth: @reading_growth
      %div.hide(id="science-growth")
        = render 'subject_growth', growth: @science_growth
      %div.hide(id="english-growth")
        = render 'subject_growth', growth: @english_growth
    .subjects
      .subject.active(data-target="math-growth")
        .title Math
      .subject(data-target="reading-growth")
        .title Reading
      .subject(data-target="science-growth")
        .title Science
      .subject(data-target="english-growth")
        .title English
    .links
      .message
        .act-icon
        Results based on ACT scores
.stat-region.three-columns
  .header What percent of students <u>graduate</u> and go to <u>college</u>?
  .content
    .visual
      %div.bar-graph(id="graduate")
      %div.bar-graph.hide(id="enroll")
      %div.bar-graph.hide(id="college")
    .subjects
      .subject.active(data-target="graduate")
        .title Graduate on time
      .subject(data-target="enroll")
        .title Enroll in college
      .subject(data-target="college")
        .title Finish 1st year of college
    .links
      .compare
        .compare-arrow-icon
        <span>Compare</span> to <span>Detroit</span> averages
      .compare
        .compare-arrow-icon
        <span>Compare</span> to <span>State</span> averages


:javascript
  $(document).ready(function(e) {
    var drawDonut = function(element, data) {
      var w = 200,
        h = 200,
        r = Math.max(w, h) / 2,
        labelr = r + 20,
        color = d3.scale.category20(),
        donut = d3.scale.linear().domain([0, 100]).range([0, 2 * Math.PI]),
        arc = d3.svg.arc()
          .innerRadius(function(d) { return d.innerRadius; })
          .outerRadius(function(d) { return d.outerRadius; })
          .startAngle(function(d) { return donut(d.start); })
          .endAngle(function(d) { return donut(d.end); });

      var vis = d3.select(element)
        .append("svg:svg")
        .attr("width", w + 30)
        .attr("height", h + 30);

      var arcs = vis.selectAll("path")
        .data(data)
        .enter()
        .append("path")
        .attr("d", arc)
        .style("fill", function(d) { return d.color; })
        .attr("transform", "translate(" + (r + 10) + "," + (r + 10) + ")");

      vis.selectAll("text")
        .data(data)
        .enter()
        .append("text")
        .attr("font-size", "12px")
        .attr("transform", function(d) {
          return "translate(" + (60 + d.outerRadius) +  ',' + (100 - d.innerRadius) +  ")";
        })
        .text(function(d) { return d.label; });
    };

    var donutOpts = function(label, color, start, end, outer, inner) {
      return {
        label: label,
        color: color,
        start: start,
        end: end,
        outerRadius: outer,
        innerRadius: inner
      };
    };

    drawDonut("#math-ready", [
      donutOpts(null, "#fff", 0, 100, 100, 25),
      donutOpts("#{@math_ready}%", "#bde35f", 0, #{@math_ready}, 100, 75),
      donutOpts("#{@detroit_math_ready}%", "#ec5932", 0, #{@detroit_math_ready}, 75, 50),
      donutOpts("#{@state_math_ready}%", "#14b2ae", 0, #{@state_math_ready}, 50, 25)
    ]);

    drawDonut("#reading-ready", [
      donutOpts(null, "#fff", 0, 100, 100, 25),
      donutOpts("#{@reading_ready}%", "#bde35f", 0, #{@reading_ready}, 100, 75),
      donutOpts("#{@detroit_reading_ready}%", "#ec5932", 0, #{@detroit_reading_ready}, 75, 50),
      donutOpts("#{@state_reading_ready}%", "#14b2ae", 0, #{@state_reading_ready}, 50, 25)
    ]);

    drawDonut("#science-ready", [
      donutOpts(null, "#fff", 0, 100, 100, 25),
      donutOpts("#{@science_ready}%", "#bde35f", 0, #{@science_ready}, 100, 75),
      donutOpts("#{@detroit_science_ready}%", "#ec5932", 0, #{@detroit_science_ready}, 75, 50),
      donutOpts("#{@state_science_ready}%", "#14b2ae", 0, #{@state_science_ready}, 50, 25)
    ]);

    drawDonut("#english-ready", [
      donutOpts(null, "#fff", 0, 100, 100, 25),
      donutOpts("#{@english_ready}%", "#bde35f", 0, #{@english_ready}, 100, 75),
      donutOpts("#{@detroit_english_ready}%", "#ec5932", 0, #{@detroit_english_ready}, 75, 50),
      donutOpts("#{@state_english_ready}%", "#14b2ae", 0, #{@state_english_ready}, 50, 25)
    ]);

    var drawBar = function(element, data) {
      var margin = {top: 20, left: 40},
          width = 80,
          height = 200;

      var x = d3.scale.ordinal()
        .rangeRoundBands([0, width], .05);

      var y = d3.scale.linear().range([height, 0]);

      var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom")

      var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")

      var svg = d3.select(element).append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform",
          "translate(" + 0 + "," + 0 + ")");

      y.domain([0, d3.max(data, function(d) {
        return d.value;
      })]);

      svg.selectAll("bar")
        .data(data)
        .enter()
        .append("rect")
        .style("fill", function(d) { return d.color; })
        .attr("width", width)
        .attr("y", function(d) { return y(d.value); })
        .attr("height", function(d) {
          return height - y(d.value);
        });

      svg.selectAll("text")
        .data(data)
        .enter()
        .append("text")
        .attr("font-size", "12px")
        .attr("x", function(d) { return 25 })
        .attr("y", function(d) { return y(d.value); })
        .text(function(d, i) { return d.label; });
    };

    var barOpts = function(label, color, value) {
      return {
        label: label,
        color: color,
        value: value
      };
    };

    drawBar('#graduate', [
      barOpts("", '#fff', 100),
      barOpts("#{@graduate}%", '#bde35f', #{@graduate})
    ]);

    drawBar('#enroll', [
      barOpts("", '#fff', 100),
      barOpts("#{@enroll}%", '#bde35f', #{@enroll})
    ]);

    drawBar('#college', [
      barOpts("", '#fff', 100),
      barOpts("#{@college}%", '#bde35f', #{@college})
    ]);
  });
