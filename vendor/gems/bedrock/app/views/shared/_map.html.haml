.wrapper
  - # map ||= local_assigns[:map]
  .map{:id => map.div_id}
  - if map.andand.key and !map.key.empty?
    .key
      - map.layers.each do |l|
        - next unless l.key
        %span{:class => "key_#{l.id} #{l.hide ? 'hide' : ''}"}
          - l.key.each do |k,v|
            %span.item
              .square{:style => "background-color: #{k};"}>
              %span.lbl= raw(v)

  :javascript
    var map = null;
    var x = function() {
      var m = null;
      var baseLayers = #{map.base_layers.to_json};
      var layers     = #{map.layers_hash.to_json};
      
      $(document).ready(function() {
        var opts = {
          divId:  '#{map.div_id}',
          center:  #{map.center.to_json},
          extent:  #{map.extent.to_json},
          zoom:    #{map.zoom.to_json},
          minZoom: #{(map.min_zoom || 2).to_json},
          maxZoom: #{(map.max_zoom || 18).to_json},
          layerControl:   #{map.layer_control.to_json},
          cloudmadeKey:   #{Bedrock.cloudmade_key.to_json},
          cloudmadeStyle: #{Bedrock.cloudmade_style.to_json},
          geolocate: (typeof(gps_disabled) === 'undefined' || !gps_disabled) ? #{map.geolocate.to_json} : false,
          hash: #{map.hash.nil? ? true : map.hash},
        };
    
        m = new Paraffin.Map(opts);    
        m.initializeLayers(baseLayers, layers);
        
        $('#reset').click(function(e) {
          m.setExtent(#{map.extent.to_json});
        });
        
        m.map.on('layeradd', function(e) {
          $('.key_' + e.layer.id, $('##{map.div_id}').parent()).show();
        });
        m.map.on('layerremove', function(e) {
          $('.key_' + e.layer.id, $('##{map.div_id}').parent()).hide();
        });
    
        if(opts.geolocate == 'manual') {
          $('#gps').show();
          $('#gps').click(function(e) {
            m.enableGPS({
              watch: true,
              noLocation: function() { $.ajax({ async: true, type: 'GET', url: '/disable_gps', data: {}, cache: false, success: function(data) { } }); }
            });
          });
        }
        
        // For backwards compat, assign the global "map" to the last one created. Most pages only have one map so this is fine.
        // Other javascripts (app.js, sc.js) refer to the "map" var instead of allowing for multiple maps on a page
        map = m;
      });
    }();
  
      


